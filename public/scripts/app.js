class GameWebApp {
    constructor() {
        console.log('üöÄ App constructor called');
        this.init();
    }

    async init() {
        console.log('üîÑ Initialization started');
        
        try {
            // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
            this.showLoadingScreen();
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            console.log('üì± Initializing Telegram...');
            
            if (typeof Telegram === 'undefined') {
                throw new Error('Telegram WebApp not loaded');
            }
            
            Telegram.WebApp.ready();
            Telegram.WebApp.expand();
            console.log('‚úÖ Telegram expanded to fullscreen');
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = Telegram.WebApp.initDataUnsafe.user;
            console.log('üë§ User data:', userData);
            
            if (userData) {
                this.updateUserProfile(userData);
            }
            
            // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            this.setupBasicNavigation();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                console.log('üîÑ Hiding loading screen');
                this.hideLoadingScreen();
            }, 2000);
            
        } catch (error) {
            console.error('‚ùå Init error:', error);
            // –í–°–ï–ì–î–ê —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.hideLoadingScreen();
        }
    }

    updateUserProfile(userData) {
        try {
            const nameElement = document.getElementById('user-name');
            const avatarElement = document.getElementById('user-avatar');
            
            if (nameElement) {
                nameElement.textContent = userData.first_name || 'User';
            }
            
            if (avatarElement && userData.photo_url) {
                avatarElement.src = userData.photo_url;
            }
        } catch (error) {
            console.warn('Profile update error:', error);
        }
    }

    setupBasicNavigation() {
        try {
            const buttons = document.querySelectorAll('.nav-btn');
            buttons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const pageId = btn.getAttribute('data-page');
                    console.log('Navigating to:', pageId);
                    
                    // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è —Ç–µ—Å—Ç–∞
                    alert('Navigation: ' + pageId);
                });
            });
        } catch (error) {
            console.warn('Navigation setup error:', error);
        }
    }

    showLoadingScreen() {
        try {
            const loading = document.getElementById('loading-screen');
            const app = document.getElementById('app');
            
            if (loading) loading.style.display = 'flex';
            if (app) app.style.display = 'none';
        } catch (error) {
            console.error('Show loading error:', error);
        }
    }

    hideLoadingScreen() {
        try {
            const loading = document.getElementById('loading-screen');
            const app = document.getElementById('app');
            
            if (loading) loading.style.display = 'none';
            if (app) app.style.display = 'block';
            
            console.log('‚úÖ Loading screen hidden, app visible');
        } catch (error) {
            console.error('Hide loading error:', error);
        }
    }
}

// –ê–ë–°–û–õ–Æ–¢–ù–û –Ω–∞–¥–µ–∂–Ω—ã–π –∑–∞–ø—É—Å–∫
console.log('üéØ Script loaded, starting app...');

// –ó–∞–ø—É—Å–∫ –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üìã DOM ready, creating app instance');
        window.app = new GameWebApp();
    });
} else {
    // DOM —É–∂–µ –≥–æ—Ç–æ–≤
    console.log('‚ö° DOM already ready, creating app instance');
    window.app = new GameWebApp();
}

// –ê–í–ê–†–ò–ô–ù–´–ô –¢–ê–ô–ú–ê–£–¢ - –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
    console.log('‚è∞ Emergency timeout - forcing app show');
    const loading = document.getElementById('loading-screen');
    const app = document.getElementById('app');
    
    if (loading) loading.style.display = 'none';
    if (app) app.style.display = 'block';
}, 5000);
